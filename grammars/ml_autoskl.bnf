<Start> ::= <preprocessing> '#' <algorithm> | <algorithm>

<preprocessing> ::=  <imputation> | <bounding> | <dimensionality> |      		     
		     <imputation> '#' <bounding> | 
		     <imputation> '#' <dimensionality> |
		     <bounding> '#' <dimensionality> | 		     
		     <imputation> '#' <bounding> '#' <dimensionality>


<imputation> ::= 'Imputer' <strategy_imp>
<strategy_imp> ::= 'mean' | 'median' | 'most_frequent'

<bounding> ::= 'Normalizer' | 'MinMaxScaler' | 'StandardScaler'



<dimensionality> ::= <feature_selection> | <feature_construction> | <feature_selection> '#' <feature_construction>

<feature_selection> ::=  <supervised> | <unsupervised> <featuresToSelect>

<supervised> ::= <filter_univariate> <score_function> | <specificMLAlgorithm>

<filter_univariate> ::= 'SelectPercentile' <percentile> | <alphaOptions> <alpha_value>
<alphaOptions> ::= 'SelectFpr' | 'SelectFwe' | 'SelectFdr'
<alpha_value> ::= 'RANDFLOAT(0.01,0.5)'
<percentile> ::= 'RANDINT(1,99)'
<score_function> ::= 'f_classif' | 'chi2'


<specificMLAlgorithm> ::= <TreesOrForestEnsemble> <min_samples_split>  <max_samples_leaf> | <Linear> <C> <class_weight>
<TreesOrForestEnsemble> ::= <EnsembleOptions> <bootstrap_and_oob> <max_features> <class_weight_Trees> | 'RandomTreesEmbedding' <max_depth>

<EnsembleOptions> ::= 'ExtraTreesClassifier'  <criterion> | 'ExtraTreesRegressor'


<unsupervised> ::=  <CompAnalises> | 'TruncatedSVD' | <feature_agglom> | <KernelApproximation> 

<CompAnalises> ::= <PCA> <whitening> | <kernelPCA> 
<comp_CA> ::= 'RANDINT(10,2000)'

<PCA> ::= 'TraditionalPCA' | <FastICA>
<whitening> ::= 'True' | 'False'

<FastICA> ::= 'FastICA' <algorithm_fastica> <funct>
<algorithm_fastica> ::= 'parallel' | 'deflation'
<funct> ::= 'logcosh' | 'exp' | 'cube'

<kernelPCA> ::= 'KernelPCA' <k_kpca> <degree_kernel> <gamma> <coef0>
<k_kpca> ::= 'poly' | 'rbf' | 'sigmoid' | 'cosine'


<target_dim> ::= 'RANDINT(10,256)'
<n_clusters> ::= 'RANDINT(2,406)'

<feature_agglom> ::= 'FeatureAgglomeration' <affinity> <pooling_func>
<affinity> ::= 'euclidean' <linkage_type0>| <affinity_options> <linkage_type1>
<affinity_options> ::= 'l1' | 'l2' | 'manhattan' | 'cosine'
<linkage_type0> ::= 'ward' | <linkage_type1>
<linkage_type1> ::= 'complete' | 'average'
<pooling_func> ::= 'mean' | 'median' | 'max'

<KernelApproximation> ::= 'RBFSampler' <gamma> | 'Nystroem' <kernel_approx> <gamma> <degree_kernel> <coef0>
<kernel_approx> ::='rbf' | 'cosine' | 'chi2' | 'poly' | 'sigmoid'
<comp_ka> ::= 'RANDINT(50,10000)'



<feature_construction> ::=   'PolynomialFeatures' <degree_construction> <interaction-only> <include-bias>
<interaction-only> ::= 'True' | 'False'
<include-bias> ::= 'True' | 'False'
<degree_construction>  ::= '2' | '3'


##Depend on the number of features = 2 to numbersOfFeatures-1:
<features> ::= 'RANDINT(2,3)' 
##Depend on the number of features = 1 to numbersOfFeatures-1:
<featuresToSelect> ::= 'RANDINT(1,3)'




<algorithm> ::= <strong> | <weak>
<strong> ::= <Trees> | <NaiveBayes> | <SVM>

<Trees> ::= <TreeOptions> <min_samples_split>  <max_samples_leaf> | 'AdaBoostClassifier' <algorithm_ada> <n_estimators> <learning_rate_ada>
<TreeOptions> ::= 'DecisionTreeClassifier' <criterion> <max_depth> <class_weight> | <VariousEstimators>
<VariousEstimators> ::=  <gradientBoostingClassifier> | <TreesEnsemble>  <criterion> <bootstrap_and_oob> <max_features> <class_weight_Trees>
<TreesEnsemble> ::= 'RandomForestClassifier' | 'ExtraTreesClassifier'
<gradientBoostingClassifier> ::= 'GradientBoostingClassifier' <learning_rate_gradient>  <n_estimators> <subsample> <max_depth>
<criterion> ::= 'entropy' | 'gini'
<max_depth> ::= 'RANDINT(1,10)'
<class_weight> ::= 'balanced' | 'None'
<min_samples_split> ::= 'RANDINT(2,20)'
<max_samples_leaf> ::= 'RANDINT(1,20)'
<bootstrap_and_oob> ::= 'True' <oob_score> | 'False False'
<max_features> ::= 'RANDFLOAT(0.05,1.0)'
<class_weight_Trees> ::= 'balanced' | 'balanced_subsample' | 'None'
<learning_rate_gradient> ::= 'RANDFLOAT(0.01,1.0)'
<n_estimators> ::=  'RANDINT(50,500)'
<subsample> ::= 'RANDFLOAT(0.01,1.0)'
<oob_score> ::= 'True' | 'False'
<algorithm_ada> ::= 'SAMME.R' | 'SAMME'
<learning_rate_ada> ::= 'RANDFLOAT(0.01,2.0)'


<NaiveBayes> ::= 'GaussianNB' | <SpecificNB> <alpha>  'fit_prior' | <SpecificNB> <alpha>
<SpecificNB> ::= 'BernoulliNB' | 'MultinomialNB'
<alpha> ::= 'RANDFLOAT(0.001,100.0)' 


<SVM> ::= <general_SVC> <C> <class_weight>
<general_SVC> ::= 'SVC'  <kernel>  <degree_kernel>  <gamma>  <coef0>  <shrinking> | <Linear> 
<Linear> ::= 'LinearSVC' <penalty> <tol>
<penalty> ::= 'l2' | 'l1'
<tol> ::= 'RANDFLOAT(0.0000000001,0.1)'
<kernel> ::= 'poly' | 'rbf'| 'sigmoid'
<degree_kernel>  ::= 'RANDINT(1,5)'
<gamma> ::= 'RANDFLOAT(0.000030517578125,8.0)'
<coef0> ::= 'RANDFLOAT(-1.0,1.0)'
<shrinking> ::= 'True' | 'False'
<C> ::= 'RANDFLOAT(0.03125,32768.0)'


<weak> ::= <nearest> | <discriminant> | <generalized>

<nearest> ::= 'KNeighborsClassifier' <k>  <weights> <p>
<k> ::= 'RANDINT(1,100)'
<weights> ::= 'uniform' | 'distance'
<p> ::= 'RANDINT(1,2)'


<discriminant> ::= 'LinearDiscriminantAnalysis' <tol_lda> <components_lda> | 'QuadraticDiscriminantAnalysis' <reg_param>
<tol_lda> ::= 'RANDFLOAT(0.00001,0.0001)'
<components_lda> ::= 'RANDINT(1,250)'
<reg_param> ::= 'RANDFLOAT(0.0,10.0)'


<generalized> ::= 'ProjLogit' <max_epochs> | <passive> | <sgd>
<max_epochs> ::= 'RANDINT(1,50)'

<passive> ::= 'PassiveAggressive ' <C_pa>  <n_iter>  <loss> <class_weight>
<loss> ::= 'hinge' | 'squared_hinge' 
<C_pa> ::= 'RANDFLOAT(0.00001,10.0)'
<n_iter> ::= 'RANDINT(5,1000)'


<sgd> ::= 'SGDClassifier' <loss_sgd>  <l1_ratio>  <epsilon>  <learning_rate_sgd>  <power_t> <average>  <penalty_sgd>  <alpha_sgd> <n_iter> <eta0> <class_weight> 

<loss_sgd> ::= 'hinge' | 'squared_hinge' | 'log' | 'modified_huber' | 'perceptron'
<l1_ratio> ::= 'RANDFLOAT(0.000000001,0.1)'
<epsilon> ::= 'RANDFLOAT(0.00001,1.0)'
<learning_rate_sgd> ::= 'constant'| 'invscaling' | 'optimal'
<power_t> ::= 'RANDFLOAT(0.00001,1.0)'
<average> ::= 'True' | 'False'
<penalty_sgd> ::= <penalty> | 'elasticnet'
<alpha_sgd> ::= 'RANDFLOAT(0.000001,0.1)'
<eta0> ::= 'RANDFLOAT(0.0000001,1.0)'
